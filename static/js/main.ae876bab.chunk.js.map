{"version":3,"sources":["Images/logo.webp","Header.jsx","CreateNote.jsx","Notes.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","style","color","marginLeft","CreateNote","props","useState","title","text","note","setNote","InputEvent","event","target","name","value","console","log","prev","TextField","id","label","autoComplete","onChange","IconButton","onClick","passNote","aria-label","component","margin","placeholder","fullWidth","InputLabelProps","shrink","Notes","passDelete","App","item","setItem","useEffect","document","deleteValue","old","filter","val","idx","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,kMCc5BC,EAZF,WACT,OACI,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,OACf,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,UAErC,wBAAII,MAAO,CAACC,MAAO,MAAMC,WAAY,SAArC,sB,iDCkDDC,EArDE,SAACC,GAAS,IAAD,EACDC,mBAAS,CAC1BC,MAAO,GACPC,KAAM,KAHY,mBACfC,EADe,KACVC,EADU,KAMhBC,EAAW,SAACC,GAAS,IAAD,EACHA,EAAMC,OAAlBC,EADe,EACfA,KAAKC,EADU,EACVA,MACZC,QAAQC,IAAIR,GACZC,GAAQ,SAACQ,GACL,OAAO,2BACAA,GADP,kBAEKJ,EAAMC,QAWnB,OACI,oCACI,yBAAKlB,UAAU,aACX,0BAAMA,UAAU,aACZ,kBAACsB,EAAA,EAAD,CAAWC,GAAG,iBAAiBN,KAAK,QAAQO,MAAM,QAAQC,aAAa,MAAMP,MAAON,EAAKF,MAAOgB,SAAUZ,IAC1G,kBAACa,EAAA,EAAD,CAAYtB,MAAM,UAAUuB,QAZ7B,WACXpB,EAAMqB,SAASjB,GACfC,EAAQ,CACJH,MAAO,GACPC,KAAM,MAQiDX,UAAU,UAAU8B,aAAW,iBAAiBC,UAAU,QACrG,kBAAC,IAAD,OAEJ,kBAACT,EAAA,EAAD,CACItB,UAAU,YACVuB,GAAG,sBACHC,MAAM,OACNpB,MAAO,CAAE4B,OAAQ,GACjBC,YAAY,aACZC,WAAS,EACTF,OAAO,SACPf,KAAK,OACLC,MAAON,EAAKD,KACZe,SAAUZ,EACVW,aAAa,MACbU,gBAAiB,CACbC,QAAQ,S,iBC5BrBC,MAjBf,SAAe7B,GAIb,OACE,oCACI,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,cAAd,IAA6BQ,EAAME,MAAnC,KACA,uBAAGV,UAAU,aAAb,IAA2BQ,EAAMG,KAAjC,KACA,kBAACgB,EAAA,EAAD,CAAY3B,UAAU,cAAc4B,QAThC,WAChBpB,EAAM8B,WAAW9B,EAAMe,MAQ+C,kBAAC,IAAD,CAAYvB,UAAU,iB,MCmCjFuC,MA3Cf,WAAgB,IAAD,EAEQ9B,mBAAS,IAFjB,mBAEN+B,EAFM,KAEDC,EAFC,KAGbC,qBAAU,WACRC,SAASjC,MAAM,sBAEjB,IAMMkC,EAAY,SAACrB,GACjBkB,GAAQ,SAACI,GAAD,OACNA,EAAIC,QAAO,SAACC,EAAIC,GACd,OAAOA,IAAMzB,SAInB,OACE,oCACE,yBAAKvB,UAAU,WACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAY6B,SAlBR,SAACjB,GACb6B,GAAQ,SAACpB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAgBT,OAElBO,QAAQC,IAAIoB,MAeJ,yBAAKxC,UAAU,SACZwC,EAAKS,KAAI,SAACF,EAAIG,GACb,OACE,kBAAC,EAAD,CACAC,IAAKD,EACL3B,GAAI2B,EACJxC,MAAOqC,EAAIrC,MACXC,KAAMoC,EAAIpC,KACV2B,WAAYM,YC5BVQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.ae876bab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ce3b4d48.webp\";","import React from \"react\";\r\nimport Logo from \"./Images/logo.webp\";\r\nconst Header=()=>{\r\n    return (\r\n        <>\r\n            <div className=\"header\">\r\n                <div className=\"col\">\r\n                <img src={Logo} alt=\"Logo\" className=\"Logo\"/>\r\n                </div>\r\n                <h2 style={{color: \"red\",marginLeft: \"10px\"}}>Note Taking App</h2>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport { useState } from 'react';\r\n\r\nconst CreateNote=(props)=>{\r\n    const [note,setNote]=useState({\r\n        title: \"\",\r\n        text: \"\"\r\n    });\r\n\r\n    const InputEvent=(event)=>{\r\n        const {name,value}=event.target;\r\n        console.log(note);\r\n        setNote((prev)=>{\r\n            return {\r\n                ...prev,\r\n                [name]:value\r\n            };\r\n        });\r\n    };\r\n    const addEvent=()=>{\r\n        props.passNote(note);\r\n        setNote({\r\n            title: \"\",\r\n            text: \"\"\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"main_note\">\r\n                <form className=\"main_form\">\r\n                    <TextField id=\"standard-basic\" name=\"title\" label=\"Title\" autoComplete=\"off\" value={note.title} onChange={InputEvent} />\r\n                    <IconButton color=\"primary\" onClick={addEvent} className=\"add_btn\" aria-label=\"upload picture\" component=\"span\">\r\n                        <NoteAddIcon />\r\n                    </IconButton>\r\n                    <TextField\r\n                        className=\"text-area\"\r\n                        id=\"standard-full-width\"\r\n                        label=\"Note\"\r\n                        style={{ margin: 8 }}\r\n                        placeholder=\"Write Note\"\r\n                        fullWidth\r\n                        margin=\"normal\" \r\n                        name=\"text\"  \r\n                        value={note.text} \r\n                        onChange={InputEvent}\r\n                        autoComplete=\"off\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        />\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateNote;","import React from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useState } from 'react';\r\n\r\nfunction Notes(props) {\r\n  const deleteEvent=()=>{\r\n    props.passDelete(props.id);\r\n  }\r\n  return (\r\n    <>\r\n        <div className=\"note-container\">\r\n            <div className=\"note\">\r\n                <h4 className=\"note-title\"> {props.title} </h4>\r\n                <p className=\"note-text\"> {props.text} </p>\r\n                <IconButton className=\"delete-icon\" onClick={deleteEvent}><DeleteIcon className=\"del-icn\" /></IconButton>\r\n            </div>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useState, useEffect } from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport CreateNote from \"./CreateNote\";\nimport Notes from \"./Notes\";\nimport './App.css';\n\nfunction App() {\n  \n  const [item,setItem]=useState([]);\n  useEffect(()=>{\n    document.title=\"Devloped by Ajit\"\n  });\n  const addItem=(note)=>{\n    setItem((prev)=>{\n      return [...prev,note];\n    });\n    console.log(item);\n  };\n  const deleteValue=(id)=>{\n    setItem((old)=>\n      old.filter((val,idx)=>{\n        return idx!==id;\n      })\n    )\n  }\n  return (\n    <>\n      <div className=\"App-win\">\n          <Header />\n          <div className=\"App\">\n            <CreateNote passNote={addItem} />\n            <div className=\"notes\">\n              {item.map((val,index)=>{\n                return (\n                  <Notes\n                  key={index}  \n                  id={index} \n                  title={val.title}\n                  text={val.text}\n                  passDelete={deleteValue}  \n                  />\n                );\n              })}\n            </div>\n          </div>\n      </div>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}